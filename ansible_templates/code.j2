
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.connection import Connection
from ansible.module_utils.network.fortios.fortios import FortiOSHandler
from ansible.module_utils.network.fortimanager.common import FAIL_SOCKET_MSG
{%- if "import" in schema %}
{% for item in schema['import'].split(',')-%}
import {{item}}
{% endfor %}
{% endif %}


def login(data, fos):
    host = data['host']
    username = data['username']
    password = data['password']
    ssl_verify = data['ssl_verify']

    fos.debug('on')
    if 'https' in data and not data['https']:
        fos.https('off')
    else:
        fos.https('on')

    fos.login(host, username, password, verify=ssl_verify)


def filter_{{path}}_{{name}}_data(json):
    option_list = [ {%- for key, value in schema['schema']['children']|dictsort -%}
                    '{{value['name']}}'{%- if not loop.last%},{%endif -%}
                    {% if loop.index % 3 == 0 and not loop.last %}
                   {% else %} {% endif %}
                   {%- endfor -%}]
    dictionary = {}

    for attribute in option_list:
        if attribute in json and json[attribute] is not None:
            dictionary[attribute] = json[attribute]

    return dictionary

{% if special_attributes != [] -%}
def flatten_multilists_attributes(data):
    multilist_attrs = {{special_attributes}}

    for attr in multilist_attrs:
        try:
            path = "data['" + "']['".join(elem for elem in attr) + "']"
            current_val = eval(path)
            flattened_val = ' '.join(elem for elem in current_val)
            exec(path + '= flattened_val')
        except:
            pass

    return data
{% endif-%}

def underscore_to_hyphen(data):
    {%-if "monitor" is not in schema %}
    if isinstance(data, list):
        for elem in data:
            elem = underscore_to_hyphen(elem)
    elif isinstance(data, dict):
        new_data = {}
        for k, v in data.items():
            new_data[k.replace('_', '-')] = underscore_to_hyphen(v)
        data = new_data
    {% endif %}
    return data


def {{path}}_{{name}}(data, fos, check_mode=False):
    vdom = data['vdom']
    {%- if not "monitor" in schema and "mkey" in schema['schema'] %}
    state = data['state']
    {%-endif%}

    {% if not "monitor" in schema %}
    if not check_mode:
    {%- if schema['schema']['children']|length > 0 %}
        {{path}}_{{name}}_data = data['{{path}}_{{name}}']
    {%- if special_attributes != [] %}
        {{path}}_{{name}}_data = flatten_multilists_attributes({{path}}_{{name}}_data)
    {%- endif %}
        filtered_data = underscore_to_hyphen(filter_{{path}}_{{name}}_data({{path}}_{{name}}_data))
    {% endif %}
    {% else %}
    {% if schema['schema']['children']|length > 0 %}
    {{path}}_{{name}}_data = data['{{path}}_{{name}}']
    {% if special_attributes != [] -%}
    {{path}}_{{name}}_data = flatten_multilists_attributes({{path}}_{{name}}_data)
    {% endif -%}
    filtered_data = underscore_to_hyphen(filter_{{path}}_{{name}}_data({{path}}_{{name}}_data))
    {% endif %}
    {% endif %}

    {% if "path-name-code-inject" in schema %}
    # path-name-code-inject from schema begin
    {% for item in schema['path-name-code-inject']-%}
    {{item}}
    {% endfor-%}
    # path-name-code-inject from schema end
    {% endif %}

    {% if not "monitor" in schema and "mkey" in schema['schema'] %}
    if check_mode:
        return fos.get('{{original_path}}',
                       '{{original_name}}',
                       vdom=vdom)

    if state == "present":
        return fos.set('{{original_path}}',
                       '{{original_name}}',
                       data=filtered_data,
                       vdom=vdom)

    elif state == "absent":
        return fos.delete('{{original_path}}',
                          '{{original_name}}',
                          mkey=filtered_data['{{schema['schema']['mkey']|replace('_', '-')}}'],
                          vdom=vdom)
    {%elif "monitor" in schema %}
    {%if "fortiosapi" in schema %}
    {%if schema['fortiosapi']=='execute' %}
    return fos.execute('{{original_path}}',
                    '{{original_name}}/{{original_monitor}}',
    {% if schema['schema']['children']|length > 0 -%}
                    data=filtered_data,
    {% endif -%}
                    vdom=vdom)
    {% else %}
    return fos.monitor('{{original_path}}',
                    '{{original_name}}/{{original_monitor}}',
    {% if schema['schema']['children']|length > 0 -%}
                    data=filtered_data,
    {% endif -%}
                    vdom=vdom)
    {% endif %}
    {% endif %}
    {%else%}
    if check_mode:
        return fos.get('{{original_path}}',
                        '{{original_name}}',
                        vdom=vdom)
    else:
        return fos.set('{{original_path}}',
                        '{{original_name}}',
                        data=filtered_data,
                        vdom=vdom)
    {%endif%}


def is_successful_status(status):
    return status['status'] == "success" or \
        status['http_method'] == "DELETE" and status['http_status'] == 404


def fortios_{{path}}(data, fos):

    {% if schema['schema']['children']|length > 0 -%}
    {%-if "monitor" is not in schema-%}
    if check_mode or (not check_mode and data['{{path}}_{{name}}']):
    {%-else-%}
    if data['{{path}}_{{name}}']:
    {%-endif %}
        resp = {{path}}_{{name}}(data, fos)
    {% else %}
    resp = {{path}}_{{name}}(data, fos)
    {% endif %}

    {% if "fortios-path-code-inject" in schema %}
    # fortios-path-code-inject from schema begin
    {% for item in schema['fortios-path-code-inject']-%}
    {{item}}
    {% endfor-%}
    # fortios-path-code-inject from schema end
    {% endif %}

    return not is_successful_status(resp), \
        resp['status'] == "success", \
        resp
{% macro getAnsibleType(parent_attrs, attribute) -%}
{%- if calculateFullPath(parent_attrs, attribute["name"]) in special_attributes_flattened -%}
list
{%- elif attribute["type"] == "string" or attribute["type"] == "option" or  attribute["type"] == "var_string" -%}
str
{%- elif not attribute["type"] and attribute["category"]=="table"-%}
list
{%- elif not attribute["type"] and attribute["category"]=="complex"-%}
dict
{%- elif attribute["type"] == "integer"-%}
int
{%- elif attribute["type"] == "user"-%}
str
{%- elif attribute["type"] == "ipv4_address"-%}
str
{%- elif attribute["type"] == "ipv6_address"-%}
str
{%- elif attribute["type"] == "password"-%}
str
{%- elif attribute["type"] == "password_2"-%}
str
{%- elif attribute["type"] == "password_3"-%}
str
{%- elif attribute["type"] == "ipv4_classnet_any"-%}
str
{%- elif attribute["type"] == "ipv4_address_any"-%}
str
{%- elif attribute["type"] == "ipv4_address_multicast"-%}
str
{%- elif attribute["type"] == "ipv4_classnet"-%}
str
{%- elif attribute["type"] == "ipv4_classnet_host"-%}
str
{%- elif attribute["type"] == "ipv4_netmask"-%}
str
{%- elif attribute["type"] == "ipv4_netmask_any"-%}
str
{%- elif attribute["type"] == "ipv6_network"-%}
str
{%- elif attribute["type"] == "ipv6_prefix"-%}
str
{%- elif attribute["type"] == "mac_address"-%}
str
{%- elif attribute["type"] == "uuid"-%}
str
{%- elif attribute["type"] == "time"-%}
str
{%- elif attribute["type"] == "datetime"-%}
str
{%- else -%}
{{attribute["type"]}}
{%- endif -%}
{%- endmacro %}
{% macro code_fields(dict, mkey, parent_attrs) -%}
                {%- for key,value in dict |dictsort -%}
                "{{value['name']}}": {"required": {% if key == mkey -%}
                        True
                    {%- else -%}
                        False
                    {%- endif -%}
                    , "type": "{{getAnsibleType(parent_attrs, value)}}"
                    {%- if "options" in value and value['options']%},
                    "choices": [
                        {%- for v in value["options"] -%}
                        "{{ v["name"] }}"{% if not loop.last %}, {%endif-%}
                        {%- if loop.index % 3 == 0 and not loop.last %}
                        {% endif -%}
                        {%- endfor -%} ]
                    {%- endif -%}
                    {%- if value["category"] == "table" or value["category"] == "complex" %},
                    "options": {
                        {{code_fields(value["children"], value["mkey"], key if parent_attrs == '' else parent_attrs + ',' + key) |indent |indent }} }
                    {%- endif -%}}{%- if not loop.last %}, {%endif%}
                {% endfor -%}
{%- endmacro %}
def main():
    fields = {
        "host": {"required": False, "type": "str"},
        "username": {"required": False, "type": "str"},
        "password": {"required": False, "type": "str", "no_log": True},
        "vdom": {"required": False, "type": "str", "default": "root"},
        "https": {"required": False, "type": "bool", "default": True},
        "ssl_verify": {"required": False, "type": "bool", "default": True},
        {%if not "monitor" in schema and "mkey" in schema['schema'] %}"state": {"required": True, "type": "str", "choices": ["present", "absent"]},
        {%endif-%}
        "{{path}}_{{name}}": {
            {%if "mkey" in schema['schema']-%}"required": True, "type": "dict",
            {%else-%}"required": False, "type": "dict", "default": None,
            {%endif-%}
            
            "options": {
                {{ code_fields(schema['schema']['children'], schema['schema']['mkey'], '') }}
            }
        }
    }

    module = AnsibleModule(argument_spec=fields,
                           supports_check_mode=False)

    legacy_mode = 'host' in module.params and module.params['host'] is not None and \
                  'username' in module.params and module.params['username'] is not None and \
                  'password' in module.params and module.params['password'] is not None

    if not legacy_mode:
        if module._socket_path:
            connection = Connection(module._socket_path)
            fos = FortiOSHandler(connection)

            is_error, has_changed, result = fortios_{{path}}(module.params, fos)
        else:
            module.fail_json(**FAIL_SOCKET_MSG)
    else:
        try:
            from fortiosapi import FortiOSAPI
        except ImportError:
            module.fail_json(msg="fortiosapi module is required")

        fos = FortiOSAPI()

        login(module.params, fos)
        is_error, has_changed, result = fortios_{{path}}(module.params, fos)
        fos.logout()
        
    if not is_error:
        module.exit_json(changed=has_changed, meta=result)
    else:
        module.fail_json(msg="Error in repo", meta=result)


if __name__ == '__main__':
    main()
